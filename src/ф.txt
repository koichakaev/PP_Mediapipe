import { useRef, useEffect, useState } from 'react'
import Webcam from 'react-webcam'
import { Holistic, POSE_CONNECTIONS } from '@mediapipe/holistic'
import { drawConnectors, drawLandmarks } from '@mediapipe/drawing_utils'
import { Camera } from '@mediapipe/camera_utils'

const hitSound = new Audio('/hit.mp3')
const failSound = new Audio('/fail.mp3')
const levelUpSound = new Audio('/level-up.mp3') // –∑–≤—É–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω

const MPStart = () => {
  const webcamRef = useRef<Webcam>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  const headRef = useRef({ x: 0, y: 0 })
  const scoreRef = useRef(0)
  const [visibleScore, setVisibleScore] = useState(0)
  const [lives, setLives] = useState(3)
  const [isGameOver, setIsGameOver] = useState(false)
  const [level, setLevel] = useState(1)
  const [isVictory, setIsVictory] = useState(false)
  const [levelFlash, setLevelFlash] = useState(false)

  const ballRef = useRef({
    x: Math.random() * 640,
    y: -20,
    radius: 20,
    speedY: 4,
  })

  const justHitRef = useRef(false)

  const resetGame = () => {
    scoreRef.current = 0
    setVisibleScore(0)
    setLives(3)
    setIsGameOver(false)
    setIsVictory(false)
    setLevel(1)
    setLevelFlash(false)
    ballRef.current.y = -20
    ballRef.current.x = Math.random() * 640
    ballRef.current.speedY = 2
  }

  const onResults = (results: any) => {
    if (results.poseLandmarks && results.poseLandmarks[0]) {
      const nose = results.poseLandmarks[0]
      headRef.current = {
        x: (1 - nose.x) * 640,
        y: nose.y * 480,
      }
    }
  }

  useEffect(() => {
    let animationFrameId: number

    const update = () => {
      const canvas = canvasRef.current
      const ctx = canvas?.getContext('2d')
      if (!canvas || !ctx || isGameOver || isVictory) return

      ctx.clearRect(0, 0, canvas.width, canvas.height)

      if (webcamRef.current?.video) {
        ctx.save()
        ctx.translate(canvas.width, 0)
        ctx.scale(-1, 1)
        ctx.drawImage(webcamRef.current.video, 0, 0, canvas.width, canvas.height)
        ctx.restore()
      }

      const ball = ballRef.current
      ball.y += ball.speedY

      const dx = ball.x - headRef.current.x
      const dy = ball.y - headRef.current.y
      const distanceSq = dx * dx + dy * dy
      const hitRadius = (ball.radius + 15) ** 2

      if (distanceSq < hitRadius) {
        if (!justHitRef.current) {
          scoreRef.current++
          justHitRef.current = true
          hitSound.currentTime = 0
          hitSound.play()

          const newLevel = Math.floor(scoreRef.current / 5) + 1
          if (newLevel !== level) {
            setLevel(newLevel)
            ball.speedY = 2 + newLevel * 0.5
            setLevelFlash(true)
            levelUpSound.currentTime = 0
            levelUpSound.play()
            setTimeout(() => setLevelFlash(false), 800)
          }

          if (newLevel > 5) {
            setIsVictory(true)
            return
          }

          ball.y = -20
          ball.x = Math.random() * 640
        }
      } else {
        justHitRef.current = false
      }

      if (ball.y > 480) {
        failSound.currentTime = 0
        failSound.play()

        setLives(prev => {
          const newLives = prev - 1
          if (newLives <= 0) {
            setIsGameOver(true)
          }
          return newLives
        })

        ball.y = -20
        ball.x = Math.random() * 640
      }
      ctx.beginPath()
      ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2)
      ctx.fillStyle = 'black'
      ctx.fill()
      
      ctx.beginPath()
      ctx.arc(ball.x, ball.y, ball.radius / 1.5, 0, Math.PI * 2)
      ctx.fillStyle = 'yellow'
      ctx.fill()
      ctx.closePath()
      
      animationFrameId = requestAnimationFrame(update)
    }

    update()
    return () => cancelAnimationFrame(animationFrameId)
  }, [isGameOver, isVictory, level])

  useEffect(() => {
    const interval = setInterval(() => {
      setVisibleScore(scoreRef.current)
    }, 200)
    return () => clearInterval(interval)
  }, [])

  useEffect(() => {
    const holistic = new Holistic({
      locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`,
    })

    holistic.setOptions({
      modelComplexity: 1,
      smoothLandmarks: true,
      minDetectionConfidence: 0.5,
      minTrackingConfidence: 0.5,
    })

    holistic.onResults(onResults)

    let camera: Camera | null = null
    if (webcamRef.current?.video) {
      camera = new Camera(webcamRef.current.video, {
        onFrame: async () => {
          await holistic.send({ image: webcamRef.current!.video! })
        },
        width: 640,
        height: 480,
      })
      camera.start()
    }

    return () => {
      camera?.stop()
      holistic.close()
    }
  }, [])

  const renderLives = () => '‚ù§Ô∏è'.repeat(lives) + 'üñ§'.repeat(3 - lives)
  const renderLevel = () => '‚ö°'.repeat(1) + '‚ö™'.repeat(Math.max(0, 5 - level))
  const renderScore = () => `${scoreRef.current}‚≠ê`

  return (
    <div style={{ position: 'relative' }}>
      <p style={{ fontSize: 24 }}>–û—á–∫–∏: {renderScore()} | –£—Ä–æ–≤–µ–Ω—å: {renderLevel()} | –ñ–∏–∑–Ω–∏: {renderLives()}</p>
      {levelFlash && (
        <div style={{
          position: 'absolute',
          top: '40%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          fontSize: '48px',
          color: 'yellow',
          textShadow: '0 0 15px white',
          animation: 'flash 0.8s ease-in-out',
          zIndex: 20,
        }}>
          ‚ö° –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!
        </div>
      )}
      {(isGameOver || isVictory) && (
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          color: 'white',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 10,
        }}>
          <h1 style={{ fontSize: '36px', marginBottom: '20px' }}>
            {isVictory ? '–ü–æ–±–µ–¥–∞!' : '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!'}
          </h1>
          <p style={{ fontSize: '24px', marginBottom: '30px' }}>–í–∞—à —Å—á—ë—Ç: {visibleScore}</p>
          <button onClick={resetGame} style={{ fontSize: 20, padding: '12px 24px', cursor: 'pointer' }}>
            –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
          </button>
        </div>
      )}
      <canvas ref={canvasRef} width={640} height={480} />
      <Webcam ref={webcamRef} mirrored={false} style={{ display: 'none' }} />
    </div>
  )
}

export default MPStart